TODO

RPC
- Prost codegen
-[x] zero-copy RPC interface
-[x] RPC Trait
-[x] Heap allocator

Engine Framework
- *Change Engine trait to a huge Generator*, all block waitings become
  yields
- *Call an engine's method from another engine*, some engines go to an
  separate runtime, some engines become the member of other engines;
  the original big match arm becomes a series of methods
-[x] Blocking network APIs in transport engine may block the entire
     runtime
-[x] What should Engine::run() return?
- maybe the xatu customer/service framework and queues need to be
  adjusted, separating data/control queues are no more useful
- SchedulingMode::Bundled

Benchmark Suite
- worker starting order
- auto kill on clean up

Misc
- Garbage collect CmEngine
- *setup CI (which public CI service has RDMA NIC?) and benchmarks*
- Build a CI pipeline with all kinds of tests and benchmarks
- *UDP socket send/recv fd must be nonblocking*
- *add static tracing* points at various points in code for performance
  analysis
-[x] get configuration from a file to run multiple backends for developing
-[x] simplify ConnParam. Allow to set fields in QpBuilder.
-[x] update the code and directory structure of koala_examples
-[x] Add lifetime constraint to CmId in rdmacm library
-[x] Add AsHandle Trait so that open_or_create_resource can do sanity check
     and testing on the same machine
-[x] Remove repeatitive code in libkoala/cm.rs
-[x] Handle conn_param
-[x] error msg of libkoala
-[x] add method to access members by reference in libkoala
-[x] RDMA Read/Write
-[x] upgrade to 1.60, 2021
-[x] add an .cargo config, rr alias
- Also implement handle for CmId, use the pointer as the identifier.
  Now the problem is that pointers are 64-bit. Handle now is only a u32.
- support ibv functions, especially ibv_post_send for batched posting
- update all `trace!`s in TransportEngine::process_cmd
- bench_queues add an option,
  --affinity=[none,hyperthread,numa,crossnuma/inter_numa/inter_cpu]
  --affinity=[casual,l1,l3,mem]

- SAllocEngine and CmEngine should be per-process one engine. optmize
  the number of engines to build.

Shared memory heap
- SharedHeapAllocator should not use MemoryRegion any more. The pd and
  rkey, inner_handle are unnecessary. And TCP does not have these
  fields, either.
- remove file_off (it should be all zero now, given the existence of
  AddressMediator)
- need a SharedHeapEngine(SAllocEngine). This engine shares state (mrs) with
  rpc_adapter.
- use pointer strict provenance
- check if a read only shm file descriptor can be open with write
  permission and really written
- *call rdma-transport directly from rpc_adapter/ulib*
-[x] rdma mr.rs handle layout (size + alignment) rather than just size
-[x] find a more efficient way to allocate aligned `shared memory`, maybe
  using map_fixed
- shared heap dealloc
- use MAP_FIXED_NOREPLACE
- replace Unique with ShmPtr
- ShmBox, ShmPtr, Coa
-[x] slabmalloc use 1GB huge page
- dyn RpcMessage may some more fields, e.g., to access the content of
  message
- prost codegen marshal/unmarshal
- prost codegen service interface

RPC init version
- ODP
- needs to spend a lot of time checking new incoming connections
- get sglist right after jumping into koala space
- fix bug in runtime.is_spinning()
-[o] memory returned by allocate_shm is not page aligned, needs
  improvement
- releasing reply
- send/recv is too naive
- API, req/resp must be moved into RPC (better to allow pass a reference)
-[x] check incoming connect requests and make Listener::get_request()
  non-blocking
-[x] rpc client side async/.await, basically functionality done
-[x] switch_addr_space to delivery the msg to application
-[x] fill in requset metadata correctly
-[x] resize cq on connection setup/destroy
-[x] credit control on post send
-[x] koala configuration, engine paths are not read from koala.toml
- make modules in control.rs optional, based on their occurrences in
  koala.toml
- error handling at various places (user glue code, marshal/unmarshal)
- Rewrite the marshal/unmarshal and SgList
- MutableResourceTable (global lock and slot lock) (State)
- the lifetime of a reply on the server credit?

Policy
- Implement more engines for global policy

Transport Trait
- Design a unified transport trait for both socket and ibverbs
- Let every data path operation return a future, and implement a runtime
  for that
- Implement a socket datapath

Performance & CPU efficiency
- Change ResoruceTable to one of the implementations of a concurrent
  hashmap (e.g., dashmap).
- GetSendComp() is currently busy spinning
- Save CPU cycles in TransportEngine::run()
-[x] Use FnvHashMap in transport/engine
-[x] Change to Ordering::Relaxed
-[x] Control path is too slow
-[x] balance poll_cq and post_send/recv, reduce redundant poll_cq
    - <s>use seperate queues can work, but still can cause HOL among
      multiple CQs</s>

Testing
-[x] Test various threading models for koala
- One thread post_send/recv, another thread poll_cq
- Multiple threads operate on their own QPs, and poll the CQs associated
  with those QPs
- Run those tests simultaneously with multiple processes

Application
- allreduce
- alltoall is so slow, why?

Thread-safety
-[x] Move Resource struct of transport engine up a level.
-[x] Add spinlock to QueuePair, CompletionQueue... in libkoala
-[x] Most of the resources in transport/engine should be per-user, lock
     or concurrent data structure is needed
-[x] Move CqBuffer from thread_local to lazy_static
- Write a multi-threaded program to test the correctness
-[x] Per process resource management.

Resource Releasing
- Think over it carefully, rollback the creating resource operation when
  there is exception in the middle.
-[x] implement resource release
-[x] Finally find a solution to deal with Fd/Handle that can come from
     everywhere: use explicit open/close call to update the reference 
     count of the corresponding object at the backend.
-[x] Clean and release the resource after detected a user app is
     disconnected.
	- shmem-ipc
		-[x] <s>Error::Disconnected</s> won't fix
		-[x] remove the blocking send/recv
		-[x] expose current available count to read/write

Memory Registration
-[x] Overlapped memory registration (two non-overlapped regions sharing
     one virtual page), currently, we just avoid this in the example code.
-[x] Couple memory allocation and registration
	-[x] Owned MemoryRegion
	-[x] Type-safe memory region and post_send/recv
-[x] Check if it is possible to avoid rounding up to page

libkoala interface
    -[x] CmId::connect()
    -[x] CmIdListener::bind()
    -[x] CmIdListener::incoming()
    -[x] CmIdListener::accept()

Multi-NIC
