TODO

RPC
- zero-copy RPC interface
- RPC Trait
- Prost codegen
- Heap allocator

RPC init version
- rpc client side async/.await
- check incoming connect requests and make Listener::get_request()
  non-blocking
- switch_addr_space to delivery the msg to application
- fill in requset metadata correctly
- releasing reply
- resize cq on connection setup/destroy
- credit control on post send
- koala configuration, engine paths are not read from koala.toml
- make modules in control.rs optional, based on their occurrences in
  koala.toml
- error handling at various places (user glue code, marshal/unmarshal)
- Rewrite the marshal/unmarshal and SgList
- ShmBox, ShmPtr, Coa
- MutableResourceTable (global lock and slot lock) (State)
- get sglist right after jumping into koala space
- fix bug in runtime.is_spinning()
- use MAP_FIXED_NOREPLACE
- memory returned by allocate_shm is not page aligned
- req/resp must be moved into RPC (better to allow pass a reference)
- needs to spend a lot of time checking new incoming connections
- send/recv is too naive
- the lifetime of a reply on the server credit?

Policy
- Implement more engines for global policy

Transport Trait
- Design a unified transport trait for both socket and ibverbs
- Let every data path operation return a future, and implement a runtime
  for that
- Implement a socket datapath

Misc
- get configuration from a file to run multiple backends for developing
- setup CI (which public CI service has RDMA NIC?)
- Also implement handle for CmId, use the pointer as the identifier.
- simplify ConnParam. Allow to set fields in QpBuilder.
- support ibv functions, especially ibv_post_send for batched posting
- update all `trace!`s in TransportEngine::process_cmd
-[x] update the code and directory structure of koala_examples
-[x] Add lifetime constraint to CmId in rdmacm library
-[x] Add AsHandle Trait so that open_or_create_resource can do sanity check
     and testing on the same machine
-[x] Remove repeatitive code in libkoala/cm.rs
-[x] Handle conn_param
-[x] error msg of libkoala
-[x] add method to access members by reference in libkoala

-[x] RDMA Read/Write

Performance & CPU efficiency
- Change ResoruceTable to one of the implementations of a concurrent
  hashmap (e.g., dashmap).
- GetSendComp() is currently busy spinning
- Save CPU cycles in TransportEngine::run()
-[x] Use FnvHashMap in transport/engine
-[x] Change to Ordering::Relaxed
-[x] Control path is too slow
-[x] balance poll_cq and post_send/recv, reduce redundant poll_cq
    - <s>use seperate queues can work, but still can cause HOL among
      multiple CQs</s>

Testing
- Test various threading models for koala
- One thread post_send/recv, another thread poll_cq
- Multiple threads operate on their own QPs, and poll the CQs associated
  with those QPs
- Run those tests simultaneously with multiple processes
- Build a CI pipeline

Application
- allreduce
- alltoall is so slow

Thread-safety
-[x] Move Resource struct of transport engine up a level.
-[x] Add spinlock to QueuePair, CompletionQueue... in libkoala
-[x] Most of the resources in transport/engine should be per-user, lock
     or concurrent data structure is needed
-[x] Move CqBuffer from thread_local to lazy_static
- Write a multi-threaded program to test the correctness
-[x] Per process resource management.

Engine Framework
-[x] Blocking network APIs in transport engine may block the entire
     runtime
-[x] What should Engine::run() return?
- *Change Engine trait to a huge Generator*

Resource Releasing
- Think over it carefully, rollback the creating resource operation when
  there is exception in the middle.
-[x] implement resource release
-[x] Finally find a solution to deal with Fd/Handle that can come from
     everywhere: use explicit open/close call to update the reference 
     count of the corresponding object at the backend.
-[x] Clean and release the resource after detected a user app is
     disconnected.
	- shmem-ipc
		-[x] <s>Error::Disconnected</s> won't fix
		-[x] remove the blocking send/recv
		-[x] expose current available count to read/write

Memory Registration
-[x] Overlapped memory registration (two non-overlapped regions sharing
     one virtual page), currently, we just avoid this in the example code.
-[x] Couple memory allocation and registration
	-[x] Owned MemoryRegion
	-[x] Type-safe memory region and post_send/recv
-[x] Check if it is possible to avoid rounding up to page

libkoala interface
    -[x] CmId::connect()
    -[x] CmIdListener::bind()
    -[x] CmIdListener::incoming()
    -[x] CmIdListener::accept()

Multi-NIC
