//! Utilities used by the code generated by `mrpc-build`.
use std::cell::RefCell;

use crate::{Error, MRPC_CTX};

// Re-exports
pub use phoenix_api::rpc::{MessageErased, MessageMeta, RpcMsgType};
pub use phoenix_api_mrpc::control_plane::TransportType;

mod service;
pub use service::{service_post_handler, service_pre_handler, NamedService, Service};

mod client;
pub use client::{ClientStub, ReqFuture};

mod local_server;
pub mod server;
pub use local_server::LocalServer;

pub(crate) mod conn;
pub(crate) mod pending;
pub(crate) mod reply_cache;

// We can make RpcData a private trait, and only mark it for compiler generated types.
// This seems impossible.
/// Auto trait implmented for RPC request types that is safe to move to the writable shared memory heap.
pub trait RpcData: Send + Sync + 'static {}
impl<T: Send + Sync + 'static> RpcData for T {}

// TODO(cjr): move this to mrpc::Context
mod reactor;
pub use reactor::Reactor;
thread_local! {
    pub(crate) static LOCAL_REACTOR: RefCell<Reactor> = RefCell::new(Reactor::new());
}

#[doc(hidden)]
pub fn update_protos(protos: &[&str]) -> Result<(), Error> {
    MRPC_CTX.with(|ctx| ctx.update_protos(protos))
}
